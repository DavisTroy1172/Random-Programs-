// ElectricFieldforRing.cpp
// Troy Davis 
// Coding Project
// 05/7/2019
#include<iostream>
#include <stdio.h>
#include <cmath>
#include <limits>
#include<cstdlib>
#include<ctgmath>
#include<cstdio>
#define constk 8987552000
using namespace std;
int main(int argc, char **argv)
{
	int camount;
	printf("This program will calculate electric field from multiple point charges\n");
	printf("\n");
	printf("Now input how many charges you will be working with\n");
	scanf_s("%d", &camount);
	const int SIZE = 100;
	float chargex[SIZE];
	float chargey[SIZE];
	float chargez[SIZE];
	float chargem[SIZE];
	int chargec = 0;
	int chargei = 0;
	printf("\n");
	printf("Now enter the x,y,z, corrdinates and magnitude\n");
	printf("Enter them in meters and coulombs respectively \n");
	printf("\n");
	for (chargec = 0; chargec < camount; chargec++)
	{
		chargei = chargec + 1;
		printf("Enter the X coordinate of charge #%d \n", chargei);
		scanf_s("%1f", &chargex[chargec]);
		printf("\n");
		printf("Enter the Y coordinate of charge #%d \n", chargei);
		scanf_s("%1f", &chargey[chargec]);
		printf("\n");
		printf("Enter the Z coordinate of charge #%d \n", chargei);
		scanf_s("%1f", &chargez[chargec]);
		printf("\n");
		printf("Enter the magnitude of charge  #%d \n", chargei);
		scanf_s("%1f", &chargem[chargec]);
		printf("\n");
	}
	float pointx;
	float pointy;
	float pointz;
	printf("Enter the point where you want to calculate the field\n");
	printf("\n");
	printf("Enter the x-coordinate: \n");
	scanf_s("%1f", &pointx);
	printf("Enter the y-coordinate: \n");
	scanf_s("%1f", &pointy);
	printf("Enter the z-coordinate: \n");
	scanf_s("%1f", &pointz);
	printf("Now calculating field\n");
	float chargefx[SIZE];
	float chargefy[SIZE];
	float chargefz[SIZE];
	float chargefm = 0;
	float distx = 0;
	float disty = 0;
	float distz = 0;
	float distm = 0;
	float distux = 0;
	float distuy = 0;
	float distuz = 0;
	for (chargec = 0; chargec < camount; chargec++)
	{
		//calculate distance vector between charge and point of intrest;
		// OA -> OB = b-a where 0 is the origin, b and a are postion vectors of OB and OA respectively 
		distx = pointx - chargex[chargec];
		disty = pointy - chargey[chargec];
		distz = pointz - chargez[chargec];
		//calculate the distance magnitude
		distm = sqrtf(powf(distx, 2) + powf(disty, 2) + powf(distz, 2));
		// apply formula to get the field magnitude 
		// E = (kq)/r^2
		chargefm = (constk * chargem[chargec]) / (powf(distm, 2));
		// calculate the unit vector in the direction of the field 
		//using /u\ = u/|u|
		distux = distx / distm;
		distuy = disty / distm;
		distuz = distz / distm;
		//Calculate the field vector by multiplying it by the distance unit 
		chargefx[chargec] = chargefm * distux;
		chargefy[chargec] = chargefm * distuy;
		chargefz[chargec] = chargefm * distuz;
	}
	// Now sum all the field components from all charges to get the final electric field vector 
	double fieldx = 0;
	double fieldy = 0;
	double fieldz = 0;
	for (chargec = 0; chargec < camount; chargec++)
	{
		fieldx = fieldx + chargefx[chargec];
		fieldy = fieldy + chargefy[chargec];
		fieldz = fieldz + chargefz[chargec];
	}
	printf("Calculation Complete. The field at the point is: \n");
	printf("%f i, %f j, %f k N/m", fieldx, fieldy, fieldz);
	printf("\n");
	return 0;
}
